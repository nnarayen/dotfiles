"""""""""""""""""""""""""""""""""""""""""""""""""""""
" Vim-Plug
"""""""""""""""""""""""""""""""""""""""""""""""""""""
call plug#begin('~/.config/nvim/bundle/')

" Plugins
Plug 'AndrewRadev/splitjoin.vim'
Plug 'ConradIrwin/vim-bracketed-paste'
Plug 'Shougo/neosnippet-snippets'
Plug 'Shougo/neosnippet.vim'
Plug 'airblade/vim-gitgutter'
Plug 'benekastah/neomake'
Plug 'bling/vim-airline'
Plug 'christoomey/vim-tmux-navigator'
Plug 'jiangmiao/auto-pairs'
Plug 'junegunn/fzf.vim'
Plug 'junegunn/vim-easy-align'
Plug 'junegunn/vim-slash'
Plug 'sheerun/vim-polyglot'
Plug 'sickill/vim-pasta'
Plug 'svermeulen/vim-easyclip'
Plug 'terryma/vim-multiple-cursors'
Plug 'tpope/vim-endwise'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-rhubarb'
Plug 'tpope/vim-sleuth'
Plug 'tpope/vim-surround'
Plug 'vim-airline/vim-airline-themes'
Plug 'yssl/QFEnter'

" Post installation hooks
Plug 'junegunn/fzf',         { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins'}

" Language specific plugins
Plug 'tpope/vim-rails',    { 'for' : 'ruby' }
Plug 'autowitch/hive.vim', { 'for' : 'hive.hql' }

" Command specific plugins
Plug 'scrooloose/nerdtree',       { 'on': ['NERDTreeFind', 'NERDTreeToggle'] }
Plug 'easymotion/vim-easymotion', { 'on': ['<Plug>(easymotion-prefix)'] }
Plug 'tomtom/tcomment_vim',       { 'on': ['TComment'] }
Plug 'machakann/vim-swap',        { 'on': ['<Plug>(swap-prev)', '<Plug>(swap-next)'] }

" End plug
call plug#end()
filetype plugin indent on    " Required for plugins

"""""""""""""""""""""""""""""""""""""""""""""""""""""
" General Settings
"""""""""""""""""""""""""""""""""""""""""""""""""""""
" Color settings
colorscheme kolor
syntax on
set bg=dark

" Local Leader
let maplocalleader=' '        " All my macros start with <Space>

" Display
set cc=+1
set ruler                     " Show the line number on the bar
set more                      " Use more prompt
set autoread                  " Watch for file changes
set number                    " Line numbers
set hidden
set noautowrite               " Don't automagically write on :next
set lazyredraw                " Don't redraw when don't have to
set showmode
set showcmd
set cursorline

" Scrolling
set sidescrolloff=5           " Keep at least 5 lines left/right
set scrolloff=5               " Keep at least 5 lines above/below

" Clipboard
set clipboard=unnamed
set fileformats=unix
set ff=unix

" Filetypes
filetype on                   " Enable filetype
set wildmenu                  " Menu has tab completion
set laststatus=2
set list listchars=tab:\ \ ,trail:Â·
autocmd BufNewFile,BufRead * setlocal formatoptions+=t

" File specific line widths
autocmd BufNewFile,BufReadPre *.java setlocal textwidth=100
autocmd BufNewFile,BufReadPre *.tex setlocal textwidth=80
autocmd BufNewFile,BufReadPre *.rb,*.rake setlocal textwidth=100

" Adding new filetypes
au BufNewFile,BufRead *.hql set filetype=hive.hql

" Searching
set incsearch                 " Incremental search
set ignorecase                " Search ignoring case
set smartcase                 " Case sensitive for uppercase
set hlsearch                  " Highlight the search
set showmatch                 " Show matching bracket
set diffopt=filler,iwhite     " Ignore all whitespace and sync
set autoindent

" Vim splits
set splitbelow                " Open split to right / bottom
set splitright

" Misc settings
set mouse=a
set history=200
set backspace=indent,eol,start
set linebreak
set cmdheight=1               " Command line two lines high
set undolevels=1000           " 1000 undos
set updatecount=100           " Switch every 100 chars
set updatetime=250            " Update every 250ms
set complete=w,b,u,U,t,i,d    " Do lots of scanning on tab completion
set noerrorbells              " No error bells please
set virtualedit=onemore
set tags=./tags,tags;         " Find tags file

" Toggle relative numbering
set relativenumber
autocmd! InsertEnter,InsertLeave * set invrelativenumber

" Spelling
if v:version >= 700
   " Enable spell check for text files
   autocmd BufNewFile,BufRead *.txt setlocal spell spelllang=en
endif

"""""""""""""""""""""""""""""""""""""""""""""""""""""
" Useful commands and mappings
"""""""""""""""""""""""""""""""""""""""""""""""""""""

" Kill any trailing whitespace on save (credit to FB)
function! <SID>StripTrailingWhitespaces()
  let l = line(".")
  let c = col(".")
  %s/\s\+$//e
  call cursor(l, c)
endfunction

let g:kill_whitespace_blacklist = ["neosnippet"]
if index(g:kill_whitespace_blacklist, &ft) < 0
  au BufWritePre * :call <SID>StripTrailingWhitespaces()
endif

" Close all quickfix windows
autocmd FileType qf nnoremap <buffer> q :q<CR>

" Unhighlight
nnoremap <LocalLeader>q :nohlsearch<CR>

" Sort lines
vmap <LocalLeader>S :sort<CR>

" Remove insert delay
if !has('gui_running')
  set timeoutlen=300
  augroup FastEscape
    autocmd!
    au InsertEnter * set timeoutlen=100
    au InsertLeave * set timeoutlen=300
  augroup END
endif

" Exiting insert mode
inoremap jk <Esc>

" Search word under cursor
nmap <LocalLeader>s *

" Update buffer
nnoremap <LocalLeader>r :checktime<CR>

" Jump to current function declaration
nmap <LocalLeader>d [m

" Open location list
nmap <LocalLeader>l :lopen<CR>

" Directional terminal splits
if has('nvim')
  command! Vterm vsp | term
  nnoremap <C-a>v :Vterm<CR>
  command! Sterm 10sp | term
  nnoremap <C-a>s :Sterm<CR>

  autocmd TermOpen * tnoremap <buffer> jk <C-\><C-n>
  tnoremap <C-h> <C-\><C-n><C-w>h
endif

" Intelligently jump over wrapped lines
nnoremap <expr> j v:count ? 'j' : 'gj'
nnoremap <expr> k v:count ? 'k' : 'gk'

vnoremap <expr> j v:count ? 'j' : 'gj'
vnoremap <expr> k v:count ? 'k' : 'gk'

" :(
cnoreabbrev W w
cnoreabbrev Q q
cnoreabbrev WQ wq
cnoreabbrev Wq wq
cnoreabbrev wQ wq

" Avoid ex mode
nnoremap Q <nop>

" Easier tag jumping
nmap <LocalLeader>x <C-]>

" Reload files on focus
au FocusGained * if &autoread | silent checktime | endif

" Easily move to start/end of line
nnoremap H ^
vnoremap H ^
onoremap H ^
nnoremap L $
vnoremap L $
onoremap L $

" Easier to run commands
nnoremap ; :
vnoremap ; :

" Neovim workaround for C-h
if has('nvim')
  nnoremap <silent> <BS> :TmuxNavigateLeft<cr>
endif

" Source vimrc
nnoremap <LocalLeader>t :so ~/.config/nvim/init.vim<CR>

" File switching
nnoremap <LocalLeader><LocalLeader> <c-^>

" Copy file path
nnoremap <LocalLeader>u :let @+=expand('%')<CR>

" Evenly size all splits
nnoremap <silent> <C-q> <C-w>=

" Run a macro on all visually selected lines
" https://medium.com/@schtoeffel/you-don-t-need-more-than-one-cursor-in-vim-2c44117d51db#.3dcn9prw6
xnoremap @ :<C-u>call ExecuteMacroOverVisualRange()<CR>

function! ExecuteMacroOverVisualRange()
  echo "@".getcmdline()
  execute ":'<,'>normal @".nr2char(getchar())
endfunction

"""""""""""""""""""""""""""""""""""""""""""""""""""""
" Easy Motion
"""""""""""""""""""""""""""""""""""""""""""""""""""""
map <LocalLeader> <Plug>(easymotion-prefix)

"""""""""""""""""""""""""""""""""""""""""""""""""""""
" TComment
"""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:tcommentMapLeader1 = ''
let g:tcommentMapLeader2 = ''
let g:tcommentMapLeaderCommentAnyway = ''
map <LocalLeader>c :TComment<CR>

"""""""""""""""""""""""""""""""""""""""""""""""""""""
" FZF
"""""""""""""""""""""""""""""""""""""""""""""""""""""
nmap <C-p> :FZF -m<CR>
nmap <LocalLeader>a :Rg<Space>
nmap <LocalLeader>. :Tags<CR>

" Use ripgrep for code searching
command! -bang -nargs=* Rg call fzf#vim#grep('rg --colors "path:fg:green" --colors "path:style:bold" -S --column --line-number --no-heading --color=always '.shellescape(<q-args>), 1, fzf#vim#with_preview('right:50%:hidden', '?'), <bang>0)

" Search for word under cursor
nmap S :Rg (self\.)?<C-R><C-W><CR>

" Open windows in splits
let g:fzf_action = {
  \ 'ctrl-s': 'split',
  \ 'ctrl-v': 'vsplit',
\ }

" Appearance
let g:fzf_layout = { 'down': '~30%' }
let g:fzf_nvim_statusline = 0

"""""""""""""""""""""""""""""""""""""""""""""""""""""
" NERDTree
"""""""""""""""""""""""""""""""""""""""""""""""""""""
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif
nnoremap <LocalLeader>m :NERDTreeToggle<CR>
nnoremap <LocalLeader>f :NERDTreeFind<CR>
let g:NERDTreeWinSize = 50

let g:NERDTreeMapOpenVSplit='<C-v>'
let g:NERDTreeMapOpenSplit='<C-s>'

"""""""""""""""""""""""""""""""""""""""""""""""""""""
" Airline
"""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:airline_theme = 'bubblegum'
let g:airline_powerline_fonts = 1
let g:airline#extensions#branch#empty_message = 'local'
let g:airline#extensions#tmuxline#enabled = 0

" Tabline configuration
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#buffer_nr_show = 1
let g:airline#extensions#tabline#fnamemod = ':t'
let g:airline#extensions#tabline#show_tab_type = 0

"""""""""""""""""""""""""""""""""""""""""""""""""""""
" Tmuxline
"""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:tmuxline_theme = 'zenburn'
let g:tmuxline_preset = 'nikhil'

"""""""""""""""""""""""""""""""""""""""""""""""""""""
" Vim-Rails
"""""""""""""""""""""""""""""""""""""""""""""""""""""
au Filetype ruby nnoremap gd gf

""""""""""""""""""""""""""""""""""""
" QFEnter
""""""""""""""""""""""""""""""""""""
let g:qfenter_vopen_map = ['<C-v>']
let g:qfenter_hopen_map = ['<C-s>']

""""""""""""""""""""""""""""""""""""
" Easy Align
""""""""""""""""""""""""""""""""""""
vmap <LocalLeader>v <Plug>(EasyAlign)

" Define custome configurations
if !exists('g:easy_align_delimiters')
  let g:easy_align_delimiters = {}
endif
let g:easy_align_delimiters['_'] = { 'pattern': '-', 'ignore_groups': ['String'] }
let g:easy_align_delimiters[':'] = { 'pattern': ':' }
let g:easy_align_delimiters['\'] = { 'pattern': '\\' }

""""""""""""""""""""""""""""""""""""
" Easy Clip
""""""""""""""""""""""""""""""""""""
xmap d <Plug>MoveMotionXPlug
xmap x <Plug>MoveMotionXPlug
nmap dd <Plug>MoveMotionLinePlug

""""""""""""""""""""""""""""""""""""
" Deoplete
""""""""""""""""""""""""""""""""""""
let g:deoplete#enable_at_startup = 1
let g:deoplete#auto_complete_start_length = 3
let g:deoplete#file#enable_buffer_path = 1
let g:deoplete#buffer#require_same_filetype = 0
let g:deoplete#ignore_sources = {}
let g:deoplete#ignore_sources._ = ["neosnippet"]

function! Multiple_cursors_before()
  let b:deoplete_disable_auto_complete = 1
endfunction

function! Multiple_cursors_after()
  let b:deoplete_disable_auto_complete = 0
endfunction

""""""""""""""""""""""""""""""""""""
" Neosnippets
""""""""""""""""""""""""""""""""""""
function! s:neosnippet_complete()
  if pumvisible()
    return "\<c-n>"
  else
    if neosnippet#expandable_or_jumpable()
      return "\<Plug>(neosnippet_expand_or_jump)"
    endif
    return "\<tab>"
  endif
endfunction

imap <C-k> <Plug>(neosnippet_expand_or_jump)
smap <C-k> <Plug>(neosnippet_expand_or_jump)
xmap <C-k> <Plug>(neosnippet_expand_target)
imap <expr><TAB> <SID>neosnippet_complete()
smap <expr><TAB> <SID>neosnippet_complete()
xmap <expr><TAB> <SID>neosnippet_complete()
imap <silent><expr> <S-Tab> pumvisible() ? "\<C-p>" : "<S-Tab>"

""""""""""""""""""""""""""""""""""""
" Neomake
""""""""""""""""""""""""""""""""""""
let g:neomake_open_list = 2
let g:neomake_warning_sign={'text': '>>', 'texthl': 'Conditional'}
let g:neomake_error_sign={'text': '>>', 'texthl': 'ErrorMsg'}
let g:neomake_python_enabled_makers = ['flake8']
let g:neomake_ruby_enabled_makers = ['rubocop']
let g:neomake_java_enabled_makers = []

" Custom setup for javascript
let g:neomake_javascript_enabled_makers = ['eslint']
let g:neomake_jsx_enabled_makers = ['eslint']
let g:neomake_javascript_eslint_exe = system('PATH=$(npm bin):$PATH && which eslint | tr -d "\n"')
let g:neomake_jsx_eslint_exe = system('PATH=$(npm bin):$PATH && which eslint | tr -d "\n"')
let g:neomake_javascript_eslint_maker = {
  \ 'args': ['--no-color', '--format', 'compact', '--quiet'],
  \ 'errorformat': '%f: line %l\, col %c\, %m',
\ }

let g:neomake_jsx_eslint_maker = {
  \ 'args': ['--no-color', '--format', 'compact', '--quiet'],
  \ 'errorformat': '%f: line %l\, col %c\, %m',
\ }

autocmd! BufWritePost * Neomake

""""""""""""""""""""""""""""""""""""
" Auto Pairs
""""""""""""""""""""""""""""""""""""
let g:AutoPairsMultilineClose = 0

""""""""""""""""""""""""""""""""""""
" Fugitive
""""""""""""""""""""""""""""""""""""
nmap <silent> <LocalLeader>gs :Gstatus<CR>
nmap <silent> <LocalLeader>gd :Gdiff<CR>
nmap <silent> <LocalLeader>gc :Gcommit<CR>
nmap <silent> <LocalLeader>gb :Gblame<CR>
nmap <silent> <LocalLeader>gr :Gbrowse<CR>
vmap <silent> <LocalLeader>gr :Gbrowse<CR>

let g:fugitive_github_domains = ['github.com', 'git.musta.ch']

""""""""""""""""""""""""""""""""""""
" GitGutter
""""""""""""""""""""""""""""""""""""
nmap <LocalLeader>hn <Plug>GitGutterNextHunk
nmap <LocalLeader>hu <Plug>GitGutterUndoHunk

""""""""""""""""""""""""""""""""""""
" VimPasta
""""""""""""""""""""""""""""""""""""
let g:pasta_disabled_filetypes = ["coffee", "markdown", "yaml", "slim", "nerdtree"]

""""""""""""""""""""""""""""""""""""
" SplitJoin
""""""""""""""""""""""""""""""""""""
let g:splitjoin_split_mapping = ''
let g:splitjoin_join_mapping = ''

nmap <LocalLeader>k :SplitjoinJoin<cr>
nmap <LocalLeader>j :SplitjoinSplit<cr>

let g:splitjoin_trailing_comma = 1
let g:splitjoin_ruby_hanging_args = 0
let g:splitjoin_python_brackets_on_separate_lines = 1

""""""""""""""""""""""""""""""""""""
" Vim Swap
""""""""""""""""""""""""""""""""""""
nmap gh <Plug>(swap-prev)
nmap gl <Plug>(swap-next)
