"""""""""""""""""""""""""""""""""""""""""""""""""""""
" Vim-Plug
"""""""""""""""""""""""""""""""""""""""""""""""""""""
function! BuildYCM(info)
  if a:info.status == 'installed' || a:info.force
    !./install.sh --clang-completer --gocode-completer
  endif
endfunction

call plug#begin('~/.vim/bundle/')

" Plugins
Plug 'gmarik/Vundle.vim'
Plug 'Valloric/YouCompleteMe',  { 'do' : function('BuildYCM') }
Plug 'rking/ag.vim',            { 'on' : 'Ag' }
Plug 'junegunn/vim-easy-align'
Plug 'Raimondi/delimitMate'
Plug 'scrooloose/nerdtree'
Plug 'kien/ctrlp.vim'
Plug 'tomtom/tcomment_vim'
Plug 'easymotion/vim-easymotion'
Plug 'tpope/vim-fugitive'
Plug 'christoomey/vim-tmux-navigator'
Plug 'airblade/vim-gitgutter'
Plug 'FelikZ/ctrlp-py-matcher'
Plug 'bling/vim-airline'
Plug 'tpope/vim-endwise'
Plug 'pangloss/vim-javascript'
Plug 'mxw/vim-jsx'
Plug 'tpope/vim-sleuth'
Plug 'yssl/QFEnter'
Plug 'ConradIrwin/vim-bracketed-paste'

" Language specific plugins
Plug 'tpope/vim-rails',          { 'for' : 'ruby'  }
Plug 'LaTeX-Box-Team/LaTeX-Box', { 'for' : 'tex'   }
Plug 'fatih/vim-go',             { 'for' : 'go'    }
Plug 'Glench/Vim-Jinja2-Syntax', { 'for' : 'jinja' }
Plug 'slim-template/vim-slim',   { 'for' : 'slim'  }

" End plug
call plug#end()
filetype plugin indent on    " Required for plugins

"""""""""""""""""""""""""""""""""""""""""""""""""""""
" General Settings
"""""""""""""""""""""""""""""""""""""""""""""""""""""
" Color settings
colorscheme kolor
set t_Co=256
syntax on
set bg=dark

" Local Leader
let maplocalleader=','        " All my macros start with ,

" Display
set cc=+1
set ruler                     " Show the line number on the bar
set more                      " Use more prompt
set autoread                  " Watch for file changes
set number                    " Line numbers
set hidden
set noautowrite               " Don't automagically write on :next
set lazyredraw                " Don't redraw when don't have to
set showmode
set showcmd
set nocompatible              " Vim, not vi

" Scrolling
set sidescrolloff=5           " Keep at least 5 lines left/right
set scrolloff=5               " Keep at least 5 lines above/below

" Clipboard
set clipboard=unnamed
set fileformats=unix
set ff=unix

" Indenting
set tabstop=4
set softtabstop=4

" Filetypes
filetype on                   " Enable filetype
set wildmenu                  " Menu has tab completion
set laststatus=2
set list listchars=tab:\ \ ,trail:Â·
autocmd BufNewFile,BufRead * setlocal formatoptions+=t

" Java specifics
autocmd BufNewFile,BufReadPre *.java setlocal textwidth=100
let java_highlight_all=1

" Tex Line Width
autocmd BufNewFile,BufReadPre *.tex setlocal textwidth=80

" Ruby Line Width
autocmd BufNewFile,BufReadPre *.rb,*.rake setlocal textwidth=100

" Searching
set incsearch                 " Incremental search
set ignorecase                " Search ignoring case
set smartcase                 " Case sensitive for uppercase
set hlsearch                  " Highlight the search
set showmatch                 " Show matching bracket
set diffopt=filler,iwhite     " Ignore all whitespace and sync
set autoindent

" Vim splits
set splitbelow                " Open split to right / bottom
set splitright

" Misc settings
set history=200
set backspace=indent,eol,start
set linebreak
set cmdheight=1               " Command line two lines high
set undolevels=1000           " 1000 undos
set updatecount=100           " Switch every 100 chars
set complete=.,w,b,u,U,t,i,d  " Do lots of scanning on tab completion
set ttyfast                   " We have a fast terminal
set noerrorbells              " No error bells please
set virtualedit=onemore

" QuickFix window mappings
autocmd! FileType qf nnoremap <buffer> q :cclose<CR>

" Kill any trailing whitespace on save (Credit to Facebook)
function! <SID>StripTrailingWhitespaces()
  let l = line(".")
  let c = col(".")
  %s/\s\+$//e
  call cursor(l, c)
endfunction

au FileType c,cabal,cpp,javascript,php,python,ruby,readme,tex,text,vim,css,go
  \ au BufWritePre <buffer>
  \ :call <SID>StripTrailingWhitespaces()

"""""""""""""""""""""""""""""""""""""""""""""""""""""
" Useful commands and mappings
"""""""""""""""""""""""""""""""""""""""""""""""""""""

" Unhighlight
nmap <LocalLeader>q :nohlsearch<CR>

" Spelling
if v:version >= 700
   " Enable spell check for text files
   autocmd BufNewFile,BufRead *.txt setlocal spell spelllang=en
endif

" Remove insert delay
if !has('gui_running')
    set ttimeoutlen=40
    augroup FastEscape
        autocmd!
        au InsertEnter * set timeoutlen=100
        au InsertLeave * set timeoutlen=1000
    augroup END
endif

" Exiting insert mode
inoremap jk <Esc>

" Search word under cursor
nnoremap <LocalLeader>s *

" Update buffer
nnoremap <LocalLeader>r :checktime<CR>

" Toggle list mode
nmap <LocalLeader>tl :set list!<cr>

" Toggle paste mode
nmap <LocalLeader>pp :set paste!<cr>

" Move single lines
nmap j gj
nmap k gk
vmap j gj
vmap k gk

" :(
:command! WQ wq
:command! Wq wq
:command! W w
:command! Q q

" Source vimrc
nnoremap <LocalLeader>g :so ~/.vimrc<CR>

" Search directory for word under cursor
nnoremap S :grep! "\b<C-R><C-W>\b"<CR>:cw<CR>

" Delete current buffer
nnoremap <LocalLeader>d :bd<CR>

" Cycle through buffers
nnoremap <LocalLeader>n :bn<CR>

" Window movement
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-h> <C-w>h
nnoremap <C-l> <C-w>l

" File switching
nnoremap <LocalLeader><LocalLeader> <c-^>

"""""""""""""""""""""""""""""""""""""""""""""""""""""
" CtrlP
"""""""""""""""""""""""""""""""""""""""""""""""""""""
set wildignore=*.class,*.o,*.info,*.swp
set tags=tags;/
nnoremap <LocalLeader>. :CtrlPTag<CR>
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\v[\/]\.(git|hg|svn)$',
  \ 'file': '\v\.(exe|so|dll|class)$',
\ }
nnoremap <LocalLeader>f :CtrlPBuffer<CR>

"""""""""""""""""""""""""""""""""""""""""""""""""""""
" PyMatcher
"""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:ctrlp_match_func = { 'match': 'pymatcher#PyMatch' }

"""""""""""""""""""""""""""""""""""""""""""""""""""""
" Easy Motion
"""""""""""""""""""""""""""""""""""""""""""""""""""""
map <LocalLeader> <Plug>(easymotion-prefix)

"""""""""""""""""""""""""""""""""""""""""""""""""""""
" TComment
"""""""""""""""""""""""""""""""""""""""""""""""""""""
map <LocalLeader>c :TComment<CR>

"""""""""""""""""""""""""""""""""""""""""""""""""""""
" Ag
"""""""""""""""""""""""""""""""""""""""""""""""""""""
nnoremap <LocalLeader>a :Ag!<Space>

if executable('ag')
  set grepprg=ag\ --nogroup\ --nocolor    " Use ag over grep
  let g:ctrlp_use_caching = 0             " CtrlP doesn't need to cache
  let g:ctrlp_user_command = 'ag %s -l --nocolor --hidden -g ""'
endif

"""""""""""""""""""""""""""""""""""""""""""""""""""""
" Vim-go
"""""""""""""""""""""""""""""""""""""""""""""""""""""
au Filetype go nnoremap <LocalLeader>v :vsp <CR>:exe "GoDef"<CR>

"""""""""""""""""""""""""""""""""""""""""""""""""""""
" NERDTree
"""""""""""""""""""""""""""""""""""""""""""""""""""""
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif
nnoremap <LocalLeader>m :call NerdTreeToggle()<CR>
let g:NERDTreeWinSize = 50

" Smart Toggle
function! NerdTreeToggle()
  if exists("b:NERDTreeType")
    NERDTreeToggle
  else
    NERDTreeFind
  endif
endfunction

"""""""""""""""""""""""""""""""""""""""""""""""""""""
" DelimitMate
"""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:delimitMate_expand_cr = 1

"""""""""""""""""""""""""""""""""""""""""""""""""""""
" YouCompleteMe
"""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:ycm_autoclose_preview_window_after_completion = 1
let g:ycm_min_num_of_chars_for_completion = 3
let g:ycm_min_num_identifier_candidate_chars = 3
let g:ycm_add_preview_to_completeopt = 0
let g:ycm_filetype_specific_completion_to_disable = { 'ruby': 1 }
let g:ycm_global_ycm_extra_conf = '~/.vim/.ycm_extra_conf.py'
let g:ycm_confirm_extra_conf = 0
set completeopt-=preview

"""""""""""""""""""""""""""""""""""""""""""""""""""""
" Airline
"""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:airline_theme = 'bubblegum'
let g:airline_powerline_fonts = 1
let g:airline#extensions#branch#empty_message = 'local'
let g:airline#extensions#tmuxline#enabled = 0

" Tabline configuration
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#buffer_nr_show = 1
let g:airline#extensions#tabline#fnamemod = ':t'
let g:airline#extensions#tabline#show_tab_type = 0

"""""""""""""""""""""""""""""""""""""""""""""""""""""
" Tmuxline
"""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:tmuxline_theme = 'zenburn'
let g:tmuxline_preset = 'nikhil'

"""""""""""""""""""""""""""""""""""""""""""""""""""""
" Vim-Rails
"""""""""""""""""""""""""""""""""""""""""""""""""""""
au Filetype ruby nnoremap gd gf

"""""""""""""""""""""""""""""""""""""""""""""""""""""
" LaTeX-Box
"""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:LatexBox_custom_indent = 0
let g:LatexBox_latexmk_preview_continuously = 1
let g:LatexBox_show_warnings = 2
let g:LatexBox_quickfix = 2
nmap <silent> <LocalLeader>ll :Latexmk<CR>

""""""""""""""""""""""""""""""""""""
" QFEnter
""""""""""""""""""""""""""""""""""""
let g:qfenter_vopen_map = ['<C-v>']
let g:qfenter_hopen_map = ['<C-s>']

""""""""""""""""""""""""""""""""""""
" Easy Align
""""""""""""""""""""""""""""""""""""
vmap <LocalLeader>v <Plug>(EasyAlign)
nmap <LocalLeader>v <Plug>(EasyAlign)

" Define custome configurations
if !exists('g:easy_align_delimiters')
  let g:easy_align_delimiters = {}
endif
let g:easy_align_delimiters['_'] = { 'pattern': '-', 'ignore_groups': ['String'] }
let g:easy_align_delimiters[':'] = { 'pattern': ':' }
let g:easy_align_delimiters['\'] = { 'pattern': '\\' }
