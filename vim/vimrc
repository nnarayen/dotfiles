"""""""""""""""""""""""""""""""""""""""""""""""""""""
" Vim-Plug
"""""""""""""""""""""""""""""""""""""""""""""""""""""
call plug#begin('~/.vim/bundle/')

" Plugins
Plug 'Shougo/deoplete.nvim'
Plug 'benekastah/neomake'
Plug 'rking/ag.vim'
Plug 'junegunn/vim-easy-align'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'tomtom/tcomment_vim'
Plug 'christoomey/vim-tmux-navigator'
Plug 'airblade/vim-gitgutter'
Plug 'FelikZ/ctrlp-py-matcher'
Plug 'bling/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'tpope/vim-endwise'
Plug 'tpope/vim-sleuth'
Plug 'yssl/QFEnter'
Plug 'ConradIrwin/vim-bracketed-paste'
Plug 'tpope/vim-repeat'
Plug 'svermeulen/vim-easyclip'
Plug 'tpope/vim-surround'
Plug 'easymotion/vim-easymotion'
Plug 'jiangmiao/auto-pairs'
Plug 'junegunn/vim-pseudocl'
Plug 'junegunn/vim-oblique'
Plug 'terryma/vim-smooth-scroll'
Plug 'myusuf3/numbers.vim'
Plug 'tpope/vim-fugitive'

" Language specific plugins
Plug 'tpope/vim-rails',          { 'for' : 'ruby' }
Plug 'LaTeX-Box-Team/LaTeX-Box', { 'for' : 'tex'  }
Plug 'fatih/vim-go',             { 'for' : 'go'   }
Plug 'slim-template/vim-slim',   { 'for' : 'slim' }
Plug 'pangloss/vim-javascript',  { 'for' : 'javascript.jsx' }
Plug 'mxw/vim-jsx',              { 'for' : 'javascript.jsx' }

" Command specific plugins
Plug 'scrooloose/nerdtree',      { 'on': ['NERDTreeFind', 'NERDTreeToggle'] }

" End plug
call plug#end()
filetype plugin indent on    " Required for plugins

"""""""""""""""""""""""""""""""""""""""""""""""""""""
" General Settings
"""""""""""""""""""""""""""""""""""""""""""""""""""""
" Color settings
colorscheme kolor
syntax on
set bg=dark

" Local Leader
let maplocalleader=','        " All my macros start with ,

" Display
set cc=+1
set ruler                     " Show the line number on the bar
set more                      " Use more prompt
set autoread                  " Watch for file changes
set number                    " Line numbers
set hidden
set noautowrite               " Don't automagically write on :next
set lazyredraw                " Don't redraw when don't have to
set showmode
set showcmd

" Scrolling
set sidescrolloff=5           " Keep at least 5 lines left/right
set scrolloff=5               " Keep at least 5 lines above/below

" Clipboard
set clipboard=unnamed
set fileformats=unix
set ff=unix

" Indenting
set tabstop=4
set softtabstop=4

" Filetypes
filetype on                   " Enable filetype
set wildmenu                  " Menu has tab completion
set laststatus=2
set list listchars=tab:\ \ ,trail:Â·
autocmd BufNewFile,BufRead * setlocal formatoptions+=t

" File specific line widths
autocmd BufNewFile,BufReadPre *.java setlocal textwidth=100
autocmd BufNewFile,BufReadPre *.tex setlocal textwidth=80
autocmd BufNewFile,BufReadPre *.rb,*.rake setlocal textwidth=100

" Searching
set incsearch                 " Incremental search
set ignorecase                " Search ignoring case
set smartcase                 " Case sensitive for uppercase
set hlsearch                  " Highlight the search
set showmatch                 " Show matching bracket
set diffopt=filler,iwhite     " Ignore all whitespace and sync
set autoindent

" Vim splits
set splitbelow                " Open split to right / bottom
set splitright

" Misc settings
set history=200
set backspace=indent,eol,start
set linebreak
set cmdheight=1               " Command line two lines high
set undolevels=1000           " 1000 undos
set updatecount=100           " Switch every 100 chars
set complete=.,w,b,u,U,t,i,d  " Do lots of scanning on tab completion
set noerrorbells              " No error bells please
set virtualedit=onemore

" Spelling
if v:version >= 700
   " Enable spell check for text files
   autocmd BufNewFile,BufRead *.txt setlocal spell spelllang=en
endif

"""""""""""""""""""""""""""""""""""""""""""""""""""""
" Useful commands and mappings
"""""""""""""""""""""""""""""""""""""""""""""""""""""

" Kill any trailing whitespace on save (credit to FB)
function! <SID>StripTrailingWhitespaces()
  let l = line(".")
  let c = col(".")
  %s/\s\+$//e
  call cursor(l, c)
endfunction

let g:kill_whitespace_blacklist = ["snippets"]
if index(g:kill_whitespace_blacklist, &ft) < 0
  au BufWritePre * :call <SID>StripTrailingWhitespaces()
endif

" Close all quickfix windows
autocmd FileType qf nnoremap <buffer> q :q<CR>

" Unhighlight
nnoremap <LocalLeader>q :nohlsearch<CR>

" Remove insert delay
if !has('gui_running')
  set ttimeoutlen=40
  augroup FastEscape
    autocmd!
    au InsertEnter * set timeoutlen=100
    au InsertLeave * set timeoutlen=1000
  augroup END
endif

" Exiting insert mode
inoremap jk <Esc>

" Search word under cursor
nnoremap <LocalLeader>s *

" Update buffer
nnoremap <LocalLeader>r :checktime<CR>

" Center screen text
nnoremap <LocalLeader>z zz

" Directional terminal splits
if has('nvim')
  command! Vterm vsp | term
  nnoremap <C-a>v :Vterm<CR>
  command! Sterm 10sp | term
  nnoremap <C-a>s :Sterm<CR>

  autocmd TermOpen * tnoremap <buffer> jk <C-\><C-n>
  tnoremap <C-h> <C-\><C-n><C-w>h
  tnoremap <C-j> <C-\><C-n><C-w>j
  tnoremap <C-k> <C-\><C-n><C-w>k
endif

" Move single lines
nnoremap j gj
nnoremap k gk
vnoremap j gj
vnoremap k gk

" :(
cnoreabbrev W w
cnoreabbrev Q q
cnoreabbrev WQ wq
cnoreabbrev Wq wq
cnoreabbrev wQ wq

" Neovim workaround for C-h
if has('nvim')
  nnoremap <BS> <C-W>h
endif

" Source vimrc
nnoremap <LocalLeader>g :so ~/.vimrc<CR>

" File switching
nnoremap <LocalLeader><LocalLeader> <c-^>

"""""""""""""""""""""""""""""""""""""""""""""""""""""
" CtrlP
"""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:ctrlp_working_path_mode = 0

"""""""""""""""""""""""""""""""""""""""""""""""""""""
" PyMatcher
"""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:ctrlp_match_func = { 'match': 'pymatcher#PyMatch' }

"""""""""""""""""""""""""""""""""""""""""""""""""""""
" Easy Motion
"""""""""""""""""""""""""""""""""""""""""""""""""""""
map <LocalLeader> <Plug>(easymotion-prefix)

"""""""""""""""""""""""""""""""""""""""""""""""""""""
" TComment
"""""""""""""""""""""""""""""""""""""""""""""""""""""
map <LocalLeader>c :TComment<CR>

"""""""""""""""""""""""""""""""""""""""""""""""""""""
" Ag
"""""""""""""""""""""""""""""""""""""""""""""""""""""
nnoremap <LocalLeader>a :Ag!<Space>

if executable('ag')
  set grepprg=ag\ --nogroup\ --nocolor    " Use ag over grep
  let g:ctrlp_use_caching = 0             " CtrlP doesn't need to cache
  let g:ctrlp_user_command = 'ag %s -l --nocolor --hidden -g ""'
endif

" Search directory for word under cursor
nmap S :Ag! "\b<C-R><C-W>\b"<CR>:cw<CR>

"""""""""""""""""""""""""""""""""""""""""""""""""""""
" Vim-go
"""""""""""""""""""""""""""""""""""""""""""""""""""""
au Filetype go nnoremap <LocalLeader>v :vsp <CR>:exe "GoDef"<CR>

"""""""""""""""""""""""""""""""""""""""""""""""""""""
" NERDTree
"""""""""""""""""""""""""""""""""""""""""""""""""""""
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif
nnoremap <LocalLeader>m :call NerdTreeToggle()<CR>
let g:NERDTreeWinSize = 50

" Smart Toggle
function! NerdTreeToggle()
  if exists("t:NERDTreeBufName")
    NERDTreeToggle
  else
    NERDTreeFind
  endif
endfunction

"""""""""""""""""""""""""""""""""""""""""""""""""""""
" Airline
"""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:airline_theme = 'bubblegum'
let g:airline_powerline_fonts = 1
let g:airline#extensions#branch#empty_message = 'local'
let g:airline#extensions#tmuxline#enabled = 0

" Tabline configuration
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#buffer_nr_show = 1
let g:airline#extensions#tabline#fnamemod = ':t'
let g:airline#extensions#tabline#show_tab_type = 0

"""""""""""""""""""""""""""""""""""""""""""""""""""""
" Tmuxline
"""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:tmuxline_theme = 'zenburn'
let g:tmuxline_preset = 'nikhil'

"""""""""""""""""""""""""""""""""""""""""""""""""""""
" Vim-Rails
"""""""""""""""""""""""""""""""""""""""""""""""""""""
au Filetype ruby nnoremap gd gf

"""""""""""""""""""""""""""""""""""""""""""""""""""""
" LaTeX-Box
"""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:LatexBox_custom_indent = 0
let g:LatexBox_latexmk_preview_continuously = 1
let g:LatexBox_show_warnings = 2
let g:LatexBox_quickfix = 2
nnoremap <silent> <LocalLeader>ll :Latexmk<CR>

""""""""""""""""""""""""""""""""""""
" QFEnter
""""""""""""""""""""""""""""""""""""
let g:qfenter_vopen_map = ['<C-v>']
let g:qfenter_hopen_map = ['<C-s>']

""""""""""""""""""""""""""""""""""""
" Easy Align
""""""""""""""""""""""""""""""""""""
vmap <LocalLeader>v <Plug>(EasyAlign)
nmap <LocalLeader>v <Plug>(EasyAlign)

" Define custome configurations
if !exists('g:easy_align_delimiters')
  let g:easy_align_delimiters = {}
endif
let g:easy_align_delimiters['_'] = { 'pattern': '-', 'ignore_groups': ['String'] }
let g:easy_align_delimiters[':'] = { 'pattern': ':' }
let g:easy_align_delimiters['\'] = { 'pattern': '\\' }

""""""""""""""""""""""""""""""""""""
" Easy Clip
""""""""""""""""""""""""""""""""""""
xmap d <Plug>MoveMotionXPlug
nmap dd <Plug>MoveMotionLinePlug

""""""""""""""""""""""""""""""""""""
" Deoplete
""""""""""""""""""""""""""""""""""""
let g:deoplete#enable_at_startup = 1
let g:deoplete#auto_completion_start_length = 3
imap <silent><expr> <Tab> pumvisible() ? "\<C-n>" : "<Tab>"
imap <silent><expr> <S-Tab> pumvisible() ? "\<C-p>" : "<S-Tab>"

""""""""""""""""""""""""""""""""""""
" Neomake
""""""""""""""""""""""""""""""""""""
let g:neomake_open_list = 2
let g:neomake_warning_sign={'text': '>>', 'texthl': 'Conditional'}
let g:neomake_error_sign={'text': '>>', 'texthl': 'ErrorMsg'}
let g:neomake_ruby_enabled_makers = ['rubocop']
let g:neomake_jsx_enabled_makers = ['eslint']
let g:neomake_c_enabled_makers = []
let g:neomake_cpp_enabled_makers = []
let g:neomake_tex_enabled_makers = []
autocmd! BufWritePost * Neomake

""""""""""""""""""""""""""""""""""""
" Auto Pairs
""""""""""""""""""""""""""""""""""""
let g:AutoPairsMultilineClose = 0

""""""""""""""""""""""""""""""""""""
" Vim Smooth Scroll
""""""""""""""""""""""""""""""""""""
noremap <silent> <c-u> :call smooth_scroll#up(&scroll, 10, 2)<CR>
noremap <silent> <c-d> :call smooth_scroll#down(&scroll, 10, 2)<CR>
