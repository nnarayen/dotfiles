# Path to your oh-my-zsh installation.
export ZSH=$HOME/.oh-my-zsh

# Set name of the theme to load.
# Look in ~/.oh-my-zsh/themes/
# Optionally, if you set this to "random", it'll load a random theme each
# time that oh-my-zsh is loaded.
ZSH_THEME="nnarayen"

# Use homebrew python by default.
export PATH=/usr/local/bin:$PATH
export PATH="/usr/local/opt/python@2/libexec/bin:$PATH"

# Lazy load NVM
export NVM_LAZY_LOAD=true
export NVM_NO_USE=true

# All plugins
plugins=(safe-paste virtualenvwrapper zsh-nvm history-substring-search zsh-syntax-highlighting)

export ZSH_PATH=$ZSH/oh-my-zsh.sh
source $ZSH_PATH

# User configuration
setopt NO_NOMATCH

# General path settings.
export PATH=$PATH:/usr/bin
export PATH=$PATH:/bin
export PATH=$PATH:/usr/sbin
export PATH=$PATH:/sbin
export PATH=$PATH:/opt/X11/bin
export PATH=$PATH:/usr/local/git/bin
export PATH=$PATH:/usr/texbin

# Add zsh aliases
if [ -f ~/.zsh_aliases ]; then
  source ~/.zsh_aliases
fi

# Set colorful terminal
if [[ $TERM == xterm ]]; then
  TERM=xterm-256color;
fi

# FZF fuzzy finder
export FZF_DEFAULT_COMMAND='rg --files --no-ignore-vcs --hidden --glob "!.git/*"'
export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
export FZF_CTRL_R_OPTS='--sort'

# Neovim as default editor
export EDITOR='nvim'

# Source z script
source /usr/local/etc/profile.d/z.sh

# Zsh highlighting colors
ZSH_HIGHLIGHT_HIGHLIGHTERS=(main brackets)

ZSH_HIGHLIGHT_STYLES[unknown-token]=fg=red,bold
ZSH_HIGHLIGHT_STYLES[reserved-word]=fg=green
ZSH_HIGHLIGHT_STYLES[alias]=fg=green,bold
ZSH_HIGHLIGHT_STYLES[command]=fg=green,bold
ZSH_HIGHLIGHT_STYLES[path]=fg=cyan
ZSH_HIGHLIGHT_STYLES[path_prefix]=fg=cyan

# 100ms insert delay for VI Mode
KEYTIMEOUT=10

# VI Mode Settings
bindkey -v

bindkey -M viins 'jk' vi-cmd-mode
bindkey '^?' backward-delete-char

bindkey -M viins "$terminfo[cuu1]" history-substring-search-up
bindkey -M viins "$terminfo[cud1]" history-substring-search-down
bindkey -M viins "^u" clear-screen
bindkey -M vicmd 'k' history-substring-search-up
bindkey -M vicmd 'j' history-substring-search-down
bindkey -M vicmd '^a' beginning-of-line
bindkey -M vicmd '^e' end-of-line
bindkey -M vicmd 'H' beginning-of-line
bindkey -M vicmd 'L' end-of-line
bindkey -M vicmd 'u' undo

# Make Copy/Paste with the system clipboard behave as expected with vim commands.
function cutbuffer() {
  zle .$WIDGET
  echo -n $CUTBUFFER | pbcopy
  region_highlight=("0 0 standout")
}

zle_cut_widgets=(
  vi-yank
  vi-yank-eol
)
for widget in $zle_cut_widgets
do
  zle -N $widget cutbuffer
done

function putbuffer() {
  zle copy-region-as-kill "$(pbpaste)"
  zle .$WIDGET
}

zle_put_widgets=(
  vi-put-after
  vi-put-before
)
for widget in $zle_put_widgets
do
  zle -N $widget putbuffer
done

# Ctrl-W removed word backwards
bindkey '^w' backward-kill-word

# [Shift-Tab] - move through the completion menu backwards
bindkey '^[[Z' reverse-menu-complete

# Binding keys for zsh-history-subsearch
zmodload zsh/terminfo
export HISTORY_SUBSTRING_SEARCH_HIGHLIGHT_FOUND=fg=green,bold
export HISTORY_SUBSTRING_SEARCH_HIGHLIGHT_NOT_FOUND=fg=red,bold

# Virtualenv Setup
export WORKON_HOME=$HOME/.virtualenvs
if [ -f /usr/local/bin/virtualenvwrapper.sh ]; then
  workon() { unset -f workon && source /usr/local/bin/virtualenvwrapper.sh && workon "$@"; }
  [[ -n ${VIRTUAL_ENV} ]] && workon ${VIRTUAL_ENV:t} # autostart virtualenv
fi

function _copy-to-clipboard {
  print -rn -- $BUFFER | pbcopy
  [ -n "$TMUX" ] && tmux display-message 'Line copied to clipboard!'
}
zle -N _copy-to-clipboard
bindkey -M viins "\`y" _copy-to-clipboard

# Source FZF
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

# FZF to fuzzy search for directory
fd() {
  local dir
  dir=$(find ${1:-*} -path '*/\.*' -prune \
                  -o -type d -print 2> /dev/null | fzf +m) &&
  cd "$dir"
}

# cdf - cd into the directory of the selected file
cdf() {
  local file
  local dir
  file=$(fzf +m -q "$1") && dir=$(dirname "$file") && cd "$dir"
}

# Add hub auto completion
fpath=(~/.oh-my-zsh/completions $fpath)
autoload -U compinit && compinit

# Only tab complete local branches.
zstyle :completion::complete:git-checkout:argument-rest:headrefs command "git for-each-ref --format='%(refname)' refs/heads 2>/dev/null"

# Ripgrep configuration
export RIPGREP_CONFIG_PATH="/Users/nikhilnarayen/.ripgreprc"

# Cognito configuration
[ -f ~/.access/cognito ] && source ~/.access/cognito

# Powerline settings
source /usr/local/lib/python2.7/site-packages/powerline/bindings/zsh/powerline.zsh
